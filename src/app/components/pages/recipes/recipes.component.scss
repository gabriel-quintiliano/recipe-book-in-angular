:host {
  display: block;
}

.recipes {
  margin-top: 2rem;
  display: grid;
  gap: 2rem;
  
  &__btn {
    justify-self: start;
    background-color: var(--color-accent);
    color: hsl(0, 0%, 0%);
  }

  &__content {
    display: flex;
    gap: 2rem;
  }
}

.recipe-list {
  flex: 0 0 50rem;

  display: grid;
  grid-template-rows: minmax(5rem, max-content);
  align-content: start;
  gap: .5rem;
}

.recipe {
  cursor: pointer;

  border: 2px solid hsl(32 52% 80%);
  border-radius: var(--border-radius-lg);
  background-color: var(--color-primary);
  overflow: hidden;

  display: grid;
  grid-template-columns: 70% 1fr;
  grid-auto-rows: minmax(9rem, 1fr);

  &__text {
    padding: 1rem 0 1rem 1rem;
    box-shadow: 0 0 1.5rem 2.5rem var(--color-primary);
    z-index: 10;
  }

  &__title {
    margin-bottom: .8rem;
  }

  /* I don't know exactly why, but `aspect-ratio: 10 / 1;` solved the following problem: 
   * As &__img is within a grid cell which has no static height (its height is defined
   * by content), the image respected the grid cell width, but image's aspect ratio was
   * being preserved in most cases, which resulted in a inconveniently tall image.
   * With `aspect-ratio: 10 / 1;` being applied, we say: width must be 10x bigger than
   * images height, so, as width is for example 100px, height must be 10px, and that's
   * the trick, as 10px would be smaller then the container's height, `object-fit: cover`
   * makes it be at least as tall as the container and still respects width. 
   *
   * This way we make it possible that the whole container's height is only defined by
   * the text content height (&__text). */
  &__img {
    width: 100%;
    height: 100%;
    aspect-ratio: 10 / 1;
    object-fit: cover;
  }
}

.recipe-details {
  background-color: lightgoldenrodyellow;
  flex: 1;
}